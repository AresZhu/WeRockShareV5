include "Enum.fbs";
include "Shared.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

table HedgingLocation(fs_serializer) {
    listing_id: uint32;
    strategy_id: uint32;
    strategy_state: StrategyState;
}

table StrategyStateDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    state: StrategyState;
}

table NavDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    pricing_method: BasketPricingMethod;
    basket_name: string;
    nav_date: int;
    nav: double;
    gearing: double;
}

table TheoDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    listing_id: long;
    bid_theo: double;
    ask_theo: double;
}

table MarginDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    active_sentiment_index: int;
    base_skew_bps: double;
    base_spread_bps: double;
    bid_sentiment_bps: double;
    ask_sentiment_bps: double;
    bid_pos_skew_bps: double;
    ask_pos_skew_bps: double;
    bid_delta_skew_bps: double;
    ask_delta_skew_bps: double;
    bid_margin_bps: double;
    ask_margin_bps: double;    
}

table TacticBasePriceDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    listing_id: long;
    base_bid_price: double;
    base_ask_price: double;
}

table TacticPricingDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    tactic_type: TacticType;
    tactic_code: uint16;
    widness_bps: double;
    target_bid_price: double;
    borderline_bid_price: double;
    target_ask_price: double;
    borderline_ask_price: double;
    desired_bid_price: double;
    desired_ask_price: double;
    quote_bid_price: double;
    quote_ask_price: double;
}

table DeltaHedgerExposureDto(fs_serializer) {
    strategy_id: long;
    exposure_contracts: double;
    exposure_notional_usd: double;
    exposure_target_contracts: double;
    exposure_target_notional_usd:  double;  
}

table Exposure(fs_serializer) {
    security_id: long;
    notional_user: double;
}

table StrategyExposureDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
        
    notional_usd: double;
    exposures: [Exposure];
}

table StrategyExposureDtoList(fs_serializer) {
    strategy_exposures: [StrategyExposureDto];
}

table StrategyInstrumentDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    security_id: long;
    instrument_id: long;
    currency: Currency;
    price_scale: int64;
    quantity_scale: uint64;
    contract_size: double;
    price_limit_up: double;
    price_limit_down: double;
    order_router_name: string;
    gateway_instrument_index: int32;
    lot_size: double;
    tick_size_rules: [SizeRule];
}

table ExposureDetail(fs_serializer) {
    listing_id: long;
    primary_identifier: string;
    hedging_strategy_id: long;
    hedging_strategy_state: StrategyState;
    factor: double;
    quantity_target: double;
    quantity_hedged: double;
    quantity_pending: double;
    delta_usd: double;
    currency: Currency;
    to_usd_rate: double;
    reference_price: double;
}

table DeltaDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    hedging_method: IntradayHedgingMethod;
    primary_notional_usd: double; // Primary Notional in USD
    gearing: double; // Gearing
    delta_usd: double; // Delta Notioanl in USD = abs(primary_notional_usd * gearing + effective_exposure_usd) + abs(unknown_exposure_usd)
    effective_exposure_usd: double; // Effective Exposure in USD
    unknown_exposure_usd: double; // Unknown Exposure in USD
    
    effective_exposure_details: [ExposureDetail];
    unknown_exposure_details: [ExposureDetail];    
}

table StrategyPositionDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    security_id: uint32;

    yst_long_open: double;
    yst_short_open: double;
    yst_long_close: double;
    yst_short_close: double;
    intraday_long_open: double;
    intraday_short_open: double;
    intraday_long_close: double;
    intraday_short_close: double;
    booking: double;
}


table StrategyAlertDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    timestamp: int64;
    event_id: long;
    severity: AlertSeverity;
    message: string(required);
}

table TacticSummaryDto(fs_serializer) {
    strategy_id: long;
    strategy_type: StrategyType;
    
    desired_bid_price: double;
    desired_ask_price: double;    
    quote_bid_price: double;
    quote_ask_price: double;
    
    quote_bid_order_num: int;
    quote_ask_order_num: int;    
}