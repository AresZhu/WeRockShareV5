include "Enum.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

table ReferencePrice(fs_serializer) {
    id: long;
    last_updated: long;
    
    security_listing_id: long;
    type: ReferencePriceType;
    trading_date: int;
    price: double;
}

table ReferencePriceList(fs_serializer) {
    items: [ReferencePrice];
}

table ExecutionGateway(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    settings: string(required);
}

table ExecutionGatewayList(fs_serializer) {
    items: [ExecutionGateway];
}

table TickSizeTable(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    rules: string(required);
}

table TickSizeTableList(fs_serializer) {
    items: [TickSizeTable];
}

table LotSizeTable(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    lot_size: double;
}

table LotSizeTableList(fs_serializer) {
    items: [LotSizeTable];
}

table SizeRule(fs_serializer) {
    from: long;
    to: long;
    step: long;
}


table SizeRuleTable(fs_serializer) {
    id: long;
    rules: [SizeRule];
}

table TradingCalendar(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    market: Market;
    exchange: string(required);
    observed_date: int;
    description: string(required);
}

table TradingCalendars(fs_serializer) {
    items: [TradingCalendar];
}

table Security(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    primary_identifier: string(required);
    description: string;
    sedol: string;
    isin: string;
    type: SecurityType;
    market: Market;
    contract_size: double;
    expired_date: int;
    deleted: bool;
}

table SecurityList(fs_serializer) {
    items: [Security];
}

table EtfPerformance(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;                                                                                                                                                     
    
    security_id: long;
    nav_date: int;
    nav: double;
    outstanding_shares: double;
}

table EtfPerformanceList(fs_serializer) {
    items: [EtfPerformance];
}


table SecurityListing(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    is_primary: bool;
    exchange_mic: string(required);
    exchange_symbol: string(required);
    ric: string;
    bbg: string;
    bbg_for_sub: string;
    currency: Currency;
    tick_size_table_name: string;
    lot_size_table_name: string;
    deleted: bool;
}

table SecurityListingList(fs_serializer) {
    items: [SecurityListing];
}

table ExchangeSession(fs_serializer) {
    start: int32;
    end: int32;
    trading_status: TradingStatus;
}

table Instrument(fs_serializer) {
    id: long;
    
    security_id: long;
    security_type: SecurityType;
    expired_date: int;
    primary_identifier: string(required);
    description: string(required);
    market: Market;
    is_primary: bool;
    exchange_symbol: string(required);
    bbg: string;
    bbg_for_sub: string;
    isin: string;
    sedol: string;
    ric: string;
    currency: Currency;
    exchange_mic: string(required);
    exchange_acronym: string;
    contract_size: double;
    tick_size_table_name: string(required);
    lot_size_table_name: string(required);
    lot_size: ulong;
    tick_size_table: [SizeRule];
    exchange_schedule:[ExchangeSession];
    trading_date: int;
    prev_trading_date: int;
    reference_price: long;
    price_limit_up: long;
    price_limit_down: long;
    price_scalar: int64;
    quantity_scalar: uint64;
    tradable: bool;
}

table InstrumentList(fs_serializer) {
    items: [Instrument];
}

table CorporateAction(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    type: CorporateActionType;
    announcement_id: long;
    announcement_notes: string;
    announcement_date: int;
    currency: string;
    dividend_ex_date: int;
    dividend_pay_date: int;
    dividend_rate: double;
    adjustment_factor: double;
    actual_adjustment_factor: double;
}

table CorporateActionList(fs_serializer) {
    items: [CorporateAction];
}

table Node(fs_serializer) {
    id: long;
    last_updated: long;
    
    name: string(required);
    type: NodeType;
    enabled: bool;
    environment: string(required);
    hostname: string(required);
    settings: string(required);
}

table NodeList(fs_serializer) {
    items: [Node];
}

table NodeStatus(fs_serializer) {
    id: long;
    last_updated: long;
    
    node: Node(required);
    host: string;
    online: bool;
    online_time: long;
}

table NodeStatusList(fs_serializer) {
    items: [NodeStatus];
}

table Setting(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    scope: string;
    name: string;
    value: string;
}

table SettingList(fs_serializer) {
    items: [Setting];
}

table User(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    account: string;
    password: string;
    fullname: string;
    enabled: bool;
    role: Role;
    entitlements: string;
}

table UserList(fs_serializer) {
    items: [User];
}

table CurrencyRate(fs_serializer) {
    id: long;
    last_updated: long;
    
    base_currency: Currency;
    rate: double;
}

table CurrencyRateList(fs_serializer) {
    items: [CurrencyRate];
}

table MarketStatistic(fs_serializer) {
    id: long;
    last_updated: long;
    prev_close: double;
    prev_settlement_price: double;
    open: double;
    high: double;
    low: double;
    close: double;
    volume: ulong;
    limit_up: double;
    limit_down: double;
}

table MarketStatisticList(fs_serializer) {
    items: [MarketStatistic];
}

table PriceLevel(fs_serializer) {
    bid_vol: uint64;
    bid: int64;
    ask: int64;
    ask_vol: uint64;
}

table MarketPrice(fs_serializer) {
    id: long;
    last_updated: long;
    
    trading_status: TradingStatus;
    connection_state: ConnectionState;
    price_scalar: int64;
    quantity_scalar: uint64;
    levels: [PriceLevel];
    last_price: int64;
    iap: int64;
    iav: uint64;
}

table MarketPriceList(fs_serializer) {
    items: [MarketPrice];
}

table FuturesBasis(fs_serializer) {
    id: long;
    last_updated: long;
    listing_id: long;
    basis: double;
    effective_date: int;
}

table FuturesBasisList(fs_serializer) {
    items: [FuturesBasis];
}

table StrategyOrderUpdateMessage(fs_serializer) {
    order_id: long;
    type: OrderMessageType;
    reject_level: RejectLevel;
    source: OrderMessageSource;
    submitted_time: long;
}

table OrderNotification {
    node_id: short;
    strategy_id: long;
    id: long;
    type: OrderMessageType;
    reject_level: RejectLevel;
    hostname: string;
    message: string;
}

table StrategyOrder(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    ephemeral_id: long;
    security_id: long;
    listing_id: long;
    strategy_id: long;
  
    tactic_type: TacticType;
    tactic_code: ushort;
    
    trading_date: int;
    
    submit_time: long;
    end_time: long;
    
    status: OrderStatus;
    last_message_type: OrderMessageType;
    last_message: string;
    
    price: double;
    quantity: double;
    side: Side;
    order_type: OrderType;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
            
    cum_filled_qty: double;
    remaining_qty: double;
    
    average_fill_price: double;
    
    original_client_order_id: uint64;
    client_order_id: uint64;
    external_id: string;
    
    gateway_id: uint32;
    router_index: uint32;
}

table StrategyOrderList(fs_serializer) {
    items: [StrategyOrder];
}

table OpenOrder(fs_serializer) {
    id: long;
    last_updated: long;
    
    strategy_order_id: long;

    tactic_type: TacticType;
    tactic_code: ushort;
    
    submit_time: long;
    
    status: OrderStatus;
    last_message_type: OrderMessageType;
    last_message: string;
    
    price: double;
    quantity: double;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
            
    filled_size: double;
    remaining_size: double;
    
    average_price: double;
    
    internal_id: uint32;
    internal_id_on_market: uint32;
    external_id: string;
    
    router_id: uint32;
    
    security_id: long;
    strategy_id: long;
    listing_id: long;
}

table OpenOrderList(fs_serializer) {
    items: [OpenOrder];
}

table Trade(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    type: TradeType;
        
    security_id: long;
    listing_id: long;
    order_id: long;
    strategy_id: long;
    client_order_id: uint64;
    exec_id: string; 
    
    position_effect: PositionEffect;
    
    side: Side;
    price: double;
    quantity: double;
}

table TradeList(fs_serializer) {
    items: [Trade];
}

table Position(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    security_id: long;
    strategy_id: long;
    yst_long_open: double;
    yst_short_open: double;
    yst_long_close: double;
    yst_short_close: double;
    intraday_long_open: double;
    intraday_long_close: double;
    intraday_short_open: double;
    intraday_short_close: double;
    day_buy: double;
    day_buy_avg: double;
    day_sell: double;
    day_sell_avg: double;
    yst_booking: double;
    booking: double;
    yst_marked_price: double;
    marked_price: double;
    pnl_daily: double;
    pnl_mtd: double;
    pnl_ytd: double;
    pnl_total: double;
}

table PositionList(fs_serializer) {
    items: [Position];
}

table StrategyPosition(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    strategy_id: long;
    
    yst_long_open: double;
    yst_short_open: double;
    yst_long_close: double;
    yst_short_close: double;
    intraday_long_open: double;
    intraday_long_close: double;
    intraday_short_open: double;
    intraday_short_close: double;
    
    booking: double;
}

table StrategyPositionList(fs_serializer) {
    items: [StrategyPosition];
}

table OpenOrderSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    security_id: long;
    
    open_buy: double;
    open_sell: double;
    open_buy_notional: double;
    open_sell_notional: double;
}

table OpenOrderSummaryList(fs_serializer) {
    items: [OpenOrderSummary];
}

table PositionSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    security_id: long;
    
    day_buy: double;
    day_sell: double;
    day_buy_avg: double;
    day_sell_avg: double;
    
    marked_price: double;
    live_price: double;
    pnl_daily: double;
}

table PositionSummaryList(fs_serializer) {
    items: [PositionSummary];
}

table StrategySchedule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    sessions: string(required);
}

table StrategyScheduleList(fs_serializer) {
    items: [StrategySchedule];
}

table StartupStrategy(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    type: StrategyType;
    tag: string;
    name: string(required);
    full_name: string(required);
    auto_start: bool;
    schedules: string(required);
    terminated: bool;
    parameters: string(required);
    group_name: string;
    owner: string;
    execution_node_id: ubyte;
    execution_group_id: ubyte;
}

table StartupStrategyList(fs_serializer) {
    items: [StartupStrategy];
}

table Basket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    type: BasketType;
    tag: string;
    display_name: string(required);
}

table BasketList(fs_serializer) {
    items: [Basket];
}

table BasketHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    basket_id: long;
    creation_redemption_unit: int;
    trading_date: int;
    valuation_date: int;
    cashes: string;
    constituents: string;
}

table BasketHistoryList(fs_serializer) {
    items: [BasketHistory];
}

table BasketEntry(fs_serializer) {
    resolved_securityt_id: long;
    resolved_listing_id: long;
    resolved_primary_identifier: string;
    trading_symbol: string;
    exchange: string;
    security_type: SecurityType;
    sedol: string;
    isin: string;
    quantity: double;
}

table BasketCash(fs_serializer) {
    currency: Currency;
    estimated_amount: double;
}

table PricingEntry(fs_serializer) {
    listing_id: long;
    quantity: double;
}

table PricingBasket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    validation_result: BasketValidationResult;
    
    display_name: string(required);
    security_id: long;
    valuation_date: int;
    trading_date: int;
    
    cashes: [BasketCash];
    entries: [PricingEntry];
}

table PricingBasketList(fs_serializer) {
    items: [PricingBasket];
}

table HistoricalPrice {
    pre_close: double;
    close: double;
    mid: double;
    fair_value: double;
}

table PriceHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    trading_date: int;
    utc_time: int;
    security_id: long;
    listing_id: long;
    reference_name: string;
    price: double;
    source: string;
}

table PriceHistoryList(fs_serializer) {
    items: [PriceHistory];
}

table ReferencePricePoint(fs_serializer) {
    utc_time: int;
    reference_name: string;
    price: double;
}

table SecurityPriceHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
        
    trading_date: int;
    security_id: long;
    listing_id: long;
    price_points: [ReferencePricePoint];  
}

table SecurityPriceHistoryList(fs_serializer) {
    items: [SecurityPriceHistory];
}


table ScheduleTask(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    type: string(required);
    name: string(required);
    cron: string;
    enabled: bool;
    parameters: string(required);
    last_run_time: long;
    last_run_status: TaskStatus;
    last_run_message: string;
}

table ScheduleTaskList(fs_serializer) {
    items: [ScheduleTask];
}

table ScheduleTaskHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    task_id: long;
    start_time: long;
    end_time: long;
    run_type: TaskRunType;
    status: TaskStatus;
    message: string;
}

table ScheduleTaskHistoryList(fs_serializer) {
    items: [ScheduleTaskHistory];
}

table AlertEvent(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    trading_date: int;
    node_id: short;
    classification: AlertClassification;
    severity: AlertSeverity;
    message: string(required);
    hostname: string(required);
    strategy_id: long;
    acked: bool;
    acked_time: long;
    acked_user: string;
}

table AlertEventList(fs_serializer) {
    items: [AlertEvent];
}

table OrderRouter(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    execution_gateway_id: int;
    
    precedent: int;
    primary_identifier_regex: string(required);
    exchange_regex: string(required);
    index_at_gateway: uint;
    risk_settings: string(required);
}

table OrderRouterList(fs_serializer) {
    items: [OrderRouter];
}


table OrderRouterState(fs_serializer) {
    id: long;
    last_updated: long;
   
    name: string(required);
    state: ConnectionState;
    execution_gateway_id: int;
    execution_gateway_name: string;
}

table OrderRouterStateList(fs_serializer) {
    items: [OrderRouterState];
}

table NodeCommand(fs_serializer) {
    id: long;
    last_updated: long;
    
    node_id: short;
    cmd_type: NodeCommandType;
    data: string(required);
    user: string;
}

table NodeCommandList(fs_serializer) {
    items: [NodeCommand];
}

table PricingCheckRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    type: PricingCheckType;
    
    strategy_group_regex: string(required);
    strategy_name_regex: string(required);
    
    soft_limit: double;
    hard_limit: double;
}

table PricingCheckRuleList(fs_serializer) {
    items: [PricingCheckRule];
}

table PricingCheckResult(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    rule_id: long;
    strategy_id: long;
    breaching_type: BreachingType;
    message: string;
}

table PricingCheckResultList(fs_serializer) {
    items: [PricingCheckResult];
}

table PricingCheckStatistic(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    rule_id: long;
    trading_date: int;
    strategy_id: long;
    soft_breached_count: int;
    hard_breached_count: int;
}

table PricingCheckStatisticList(fs_serializer) {
    items: [PricingCheckStatistic];
}

table BasketValidation(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    result: BasketValidationResult;
    message: string;
    effective_date: int;
    nav_date: int;
    official_nav: double;
 }
 
 table BasketValidationList(fs_serializer) {
    items: [BasketValidation];
 }
 
 table BasketValidationRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    primary_identifier_regex: string(required);
    security_type: SecurityType;
    parameters: string(required);
 }
 
 table BasketValidationRuleList(fs_serializer) {
    items: [BasketValidationRule];
 }
 
 table NavHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    nav_date: int;
    nav: double;
 }
 
 table NavHistoryList(fs_serializer) {
    items: [NavHistory];
 }
 
 table FutureProduct(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    identifier: string(required);
    name: string(required);
    primary_identifier_stem: string(required);
    region: string(required);   
    
    underlying_security_id: long;
    current_contract_security_id: long;

    deleted: bool;
}

table FutureProductList(fs_serializer) {
    items: [FutureProduct];
}

table BetaModel(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    deleted: bool;
}

table BetaModelList(fs_serializer) {
    items: [BetaModel];
}

table BetaModelEntry(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    beta_model_id: long;
    future_product_id: long;
    beta: double;
}

table BetaModelEntryList(fs_serializer) {
    items: [BetaModelEntry];
}

table ResolvedBetaModelEntry(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    beta_model_id: long;
    future_product_id: long;
    future_product_identifier: string;
    beta: double;
    
    security_id: long;
    listing_id: long;
    security_primary_identifier: string;
}

table ResolvedBetaModel(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    entries: [ResolvedBetaModelEntry];
}

table ResolvedBetaModelList(fs_serializer) {
    items: [ResolvedBetaModel];
}

table ScheduleTaskType(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    full_name: string(required);
}

table ScheduleTaskTypeList(fs_serializer) {
    items: [ScheduleTaskType];
}


table HedgingResponse {
    id: long;
    strategy_id: long;
    hedging_strategy_id: long;
    security_id: long;
    listing_id: long;
    quantity: double;
    price: double;
}

table StrategyComponentStatus(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    component_type: StrategyComponentType;
    strategy_id: long;
    status: HealthStatus;
    description: string;
}

table StrategyComponentStatusList(fs_serializer) {
    items: [StrategyComponentStatus];
}

table ScheduleSession {
    start: uint32;
    duration: uint32;
}

table StrategyDataCounterDouble(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: double;
}

table StrategyDataCounterDoubleList(fs_serializer) {
    items: [StrategyDataCounterDouble];
}

table StrategyDataCounterLong(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: int64;
}

table StrategyDataCounterLongList(fs_serializer) {
    items: [StrategyDataCounterLong];
}

table StrategyDataCounterString(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: string;
}

table StrategyDataCounterStringList(fs_serializer) {
    items: [StrategyDataCounterString];
}

table EntitlementList(fs_serializer) {
    items: [Entitlement];
}


table MarketPriceDto(fs_serializer) {
    id: long;
    last_updated: long;
    
    last: int32;
    iap: int32;
    iav: uint32;
    price_scale: uint32;
    quantity_scale: uint32;
    status: TradingStatus;
    levels: [PriceLevel];
}

table MarketDataGatewayDto(fs_serializer) {
    id: long;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    state: ConnectionState;
}

table ExecutionGatewayDto(fs_serializer) {
    id: long;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    state: ConnectionState;
}

table NodeStateDto(fs_serializer) {
    id: long;
    type: NodeType;
    hostname: string(required);
    last_heartbeat: long;
}

table PlatformEvent(fs_serializer) {
    event_type: PlatformEventType;
    data: [ubyte];
}

table StrategyOrderDetail(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;   
}

table Exchange(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    mic: string(required);
    trading_day_end_time: int;
    acronym: string;
    name: string(required);
    time_zone: string(required);
}

table ExchangeSchedule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    exchange_mic: string(required);
    name: string(required);
    schedules: string(required);
}

table ExchangeCalendar(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    exchange_mic: string(required);
    trading_date: int;
    name: string(required);
    is_open: bool;
    has_settlement: bool;
    schedule_name: string(required);
}