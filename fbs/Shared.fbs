include "Enum.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

table ReferencePrice(fs_serializer) {
    id: long;
    last_updated: long;
    
    security_listing_id: long;
    type: ReferencePriceType;
    trading_date: int;
    price: double;
}

table ReferencePriceList(fs_serializer) {
    items: [ReferencePrice];
}

table ExecutionGateway(fs_serializer) {
    id: long;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    settings: string(required);
}

table ExecutionGatewayList(fs_serializer) {
    items: [ExecutionGateway];
}

table ExecutionGatewayState(fs_serializer) {
    id: long;
    last_updated: long;
    
    name: string(required);
    state: ConnectionState;
}

table ExecutionGatewayStateList(fs_serializer) {
    items: [ExecutionGatewayState];
}


table TickSizeRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    security_type: SecurityType;
    exchange: string(required);
    primary_identifier_regex: string(required);
    rules: string(required);
}

table TickSizeRuleList(fs_serializer) {
    items: [TickSizeRule];
}

table LotSizeRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_type: SecurityType;
    exchange: string(required);
    primary_identifier_regex: string(required);
    lot_size: double;
}

table LotSizeRuleList(fs_serializer) {
    items: [LotSizeRule];
}

table SizeRule(fs_serializer) {
    from: double;
    to: double;
    step: double;
}

table TickSizeTable(fs_serializer) {
    id: long;
    rules: [SizeRule];
}

table TickSizeTableList(fs_serializer) {
    items: [TickSizeTable];
}

table TradingCalendar(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    market: Market;
    exchange: string(required);
    observed_date: int;
    description: string(required);
}

table TradingCalendars(fs_serializer) {
    items: [TradingCalendar];
}

table Security(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    primary_identifier: string(required);
    description: string(required);
    sedol: string(required);
    isin: string(required);
    type: SecurityType;
    market: Market;
    contract_size: double;
    expired_date: int;
}

table SecurityList(fs_serializer) {
    items: [Security];
}

table EtfPerformance(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;                                                                                                                                                     
    
    security_id: long;
    trading_date: int;
    nav: double;
    outstanding_shares: double;
}

table EtfPerformanceList(fs_serializer) {
    items: [EtfPerformance];
}


table SecurityListing(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    is_primary: bool;
    exchange: string(required);
    trading_symbol: string(required);
    ric: string(required);
    bbg: string(required);
    currency: Currency;
}

table SecurityListingList(fs_serializer) {
    items: [SecurityListing];
}

table Instrument(fs_serializer) {
    id: long;
    
    resolving_flags: int;
    security_id: long;
    security_type: SecurityType;
    expired_date: int;
    primary_identifier: string(required);
    description: string(required);
    market: Market;
    is_primary: bool;
    trading_symbol: string(required);
    bbg: string(required);
    isin: string(required);
    sedol: string(required);
    ric: string(required);
    trading_currency: Currency;
    exchange: string(required);
    contract_size: double;
    lot_size: double;
    tick_size: double;
    tick_size_table_id: ushort;
    tick_size_description: string;
}

table InstrumentList(fs_serializer) {
    items: [Instrument];
}

table CorporateAction(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    type: CorporateActionType;
    announcement_id: long;
    announcement_notes: string;
    announcement_date: int;
    currency: string;
    dividend_ex_date: int;
    dividend_pay_date: int;
    dividend_rate: double;
    adjustment_factor: double;
    actual_adjustment_factor: double;
}

table CorporateActionList(fs_serializer) {
    items: [CorporateAction];
}

table Node(fs_serializer) {
    id: long;
    last_updated: long;
    
    name: string(required);
    enabled: bool;
    settings: string(required);
}

table NodeList(fs_serializer) {
    items: [Node];
}

table NodeStatus(fs_serializer) {
    id: long;
    last_updated: long;
    
    node: Node(required);
    host: string;
    online: bool;
    online_time: long;
}

table NodeStatusList(fs_serializer) {
    items: [NodeStatus];
}

table Setting(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    scope: string;
    name: string;
    value: string;
}

table SettingList(fs_serializer) {
    items: [Setting];
}

table User(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    account: string;
    password: string;
    fullname: string;
    enabled: bool;
}

table UserList(fs_serializer) {
    items: [User];
}


table PriceEntry(fs_serializer) {
    price: double;
    quantity: double;
}

table TickPrice(fs_serializer) {
    id: long;
    last_updated: long;

    status: TradingStatus;
    
    bid: double;
    bid_size: double;
    ask: double;
    ask_size: double;
    last: double;
    volume: double;
    turnover: double;   
}

table TickPriceList(fs_serializer) {
    items: [TickPrice];
}

table MarketDepth(fs_serializer) {
     id: long;
     last_updated: long;
     
     bids: [PriceEntry];
     asks: [PriceEntry];
}

table MarketDepthList(fs_serializer) {
    items: [MarketDepth];
}

table MarketStatistic(fs_serializer) {
    id: long;
    last_updated: long;
    preClose: double;
    preSettlementPrice: double;
    open: double;
    high: double;
    low: double;
    close: double;
    
    limit_up: double;
    limit_down: double;
}

table MarketStatisticList(fs_serializer) {
    items: [MarketStatistic];
}

table AuctionPrice(fs_serializer) {
    id: long;
    last_updated: long;
    status: TradingStatus;
    iap: double;
    iav: double;
}

table AuctionPriceList(fs_serializer) {
    items: [AuctionPrice];
}

table MarketPrice {
    id: long;
    last_updated: long;
    
    status: TradingStatus;
    iap: double;
    iav: double;
    
    bid: double;
    bid_size: double;
    ask: double;
    ask_size: double;
    last: double;
    volume: double;
    turnover: double;
    
    preClose: double;
    preSettlementPrice: double;
    open: double;
    high: double;
    low: double;
    close: double;
    
    limit_up: double;
    limit_down: double;
    
    bids: [PriceEntry];
    asks: [PriceEntry];
}

table FuturesBasis(fs_serializer) {
    id: long;
    last_updated: long;
    listing_id: long;
    basis: double;
    effective_date: int;
}

table FuturesBasisList(fs_serializer) {
    items: [FuturesBasis];
}

table StrategyOrderMessage(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    order_id: long;
    submit_time: long;
    type: OrderMessageType;
    price: double;
    quantity: double;
    message: string;
    internal_id: uint32;
    external_id: string;
    security_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    side: Side;
}

table StrategyOrderMessageList(fs_serializer) {
    items: [StrategyOrderMessage];
}

table StrategyOrder(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    ephemeral_id: long;
    security_id: long;
    listing_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    trading_symbol: string(required);
    exchange: string(required);
    currency: Currency;
    
    trading_date: int;
    
    submit_time: long;
    end_time: long;
    
    status: OrderStatus;
    last_message_type: OrderMessageType;
    
    price: double;
    quantity: double;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
    instruction: OrderInstruction;
    
    exchange_price: double;
    exchange_volume: double;
        
    filled_size: double;
    remaining_size: double;
    
    average_price: double;
    
    internal_id: uint32;
    internal_id_on_market: uint32;
    external_id: string;
    execution_gateway_id: uint32;
    execution_gateway_name: string;
}

table StrategyOrderList(fs_serializer) {
    items: [StrategyOrder];
}

table ActiveStrategyOrder(fs_serializer) {
    id: long;
    last_updated: long;
    
    security_id: long;
    listing_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    strategy_name: string;
    trading_symbol: string(required);
    exchange: string(required);
    currency: Currency;
    
    trading_date: int;
    
    submit_time: long;
    end_time: long;
    
    status: OrderStatus;
    last_message_type: OrderMessageType;
    
    price: double;
    quantity: double;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
    instruction: OrderInstruction;
    
    exchange_price: double;
    exchange_volume: double;
        
    filled_size: double;
    remaining_size: double;
    
    average_price: double;
    
    internal_id_on_market: uint32;
    external_id: string;
    
    execution_gateway: string;
}

table ActiveStrategyOrderList(fs_serializer) {
    items: [ActiveStrategyOrder];
}

table Trade(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    type: TradeType;
    strategy_type: StrategyType;
    
    security_id: long;
    listing_id: long;
    order_id: long;
    strategy_id: long;
    strategy_name: string;
    exec_id: string;
    
    trading_symbol: string(required);
    currency: Currency;
    exchange: string(required);
    
    position_effect: PositionEffect;
    
    side: Side;
    price: double;
    quantity: double;
}

table TradeList(fs_serializer) {
    items: [Trade];
}

table Position(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trading_date: int;
    security_id: long;
    strategy_type: StrategyType;
    strategy_id: long;
    yst_long_open: double;
    yst_short_open: double;
    yst_long_close: double;
    yst_short_close: double;
    intraday_long_open: double;
    intraday_long_close: double;
    intraday_short_open: double;
    intraday_short_close: double;
    day_buy: double;
    day_buy_avg: double;
    day_sell: double;
    day_sell_avg: double;
    yst_booking: double;
    booking: double;
    yst_marked_price: double;
    marked_price: double;
    pnl_daily: double;
    pnl_mtd: double;
    pnl_ytd: double;
    pnl_total: double;
}

table PositionList(fs_serializer) {
    items: [Position];
}

table LivePosition(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    position: Position;
    
    symbol: string;
    primary_listing_id: long;
    contract_size: double;
    currency: Currency;
    strategy_name: string;
    
    open_buy_orders_notional: double;
    open_sell_orders_notional: double;

    live_price: double;
    
    to_usd_rate: double;    
    day_bot_notional_usd: double;
    day_sld_notional_usd: double;
    open_buy_orders_notional_usd: double;
    open_sell_orders_notional_usd: double;
    pnl_daily_usd: double;
    pnl_mtd_usd: double;
    pnl_ytd_usd: double;
    pnl_total_usd: double;
}

table LivePositionList(fs_serializer) {
    items: [LivePosition];
}

table PositionSummary {
    trading_date: int;
    total_notional_long: long;
    total_notional_short: long;
    delta: long;

    turnover: long;
    commission: long;
    nti: double;
    pnl_daily: long;
    pnl_mtd: long;
    pnl_ytd: long;
}

table StrategySchedule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    sessions: string(required);
}

table StrategyScheduleList(fs_serializer) {
    items: [StrategySchedule];
}

table StartupStrategy(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    type: StrategyType;
    tag: string;
    display_name: string(required);
    auto_start: bool;
    schedules: string(required);
    terminated: bool;
    parameters: string(required);
    node_id: ubyte;
    group_id: ubyte;
}

table StartupStrategyList(fs_serializer) {
    items: [StartupStrategy];
}

table Basket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    creation_redemption_unit: int;
    type: BasketType;
    tag: string;
}

table BasketList(fs_serializer) {
    items: [Basket];
}

table BasketHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    basket_id: long;
    trading_date: int;
    valuation_date: int;
    constituents: string;
}

table BasketHistoryList(fs_serializer) {
    items: [BasketHistory];
}

table BasketEntry(fs_serializer) {
    resolved_listing_id: long;
    ref_symbol: string;
    ref_exchange: string;
    ref_security_type: SecurityType;
    quantity: double;
}

table BasketCash(fs_serializer) {
    currency: Currency;
    amount: double;
}

table ResolvedBasket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
        
    history_id: long;
    security_id: long;
    security_type: SecurityType;
    security_symbol: string;
    creation_redemption_unit: int;
    type: BasketType;
    tag: string;
    display_name: string;
    
    ref_listing_id: long;
    
    trading_date: int;
    valuation_date: int;
    
    cashes: [BasketCash];
    entries: [BasketEntry];
}

table ResolvedBasketList(fs_serializer) {
    items: [ResolvedBasket];
}

table PricingEntry(fs_serializer) {
    listing_id: long;
    quantity: double;
    base_price: double;
    price_offset: double;
}

table PricingBasket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
        
    security_id: long;    
    ref_listing_id: long;
    
    currency: Currency;
    scaling: double;
    price_offset: double;
    
    cashes: [BasketCash];
    entries: [PricingEntry];
}

table PricingBasketList(fs_serializer) {
    items: [PricingBasket];
}

table HistoricalPrice {
    pre_close: double;
    close: double;
    mid: double;
    fair_value: double;
}

table PriceHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    trading_date: int;
    utc_time: int;
    security_id: long;
    listing_id: long;
    reference_name: string;
    price: double;
    source: string;
}

table PriceHistoryList(fs_serializer) {
    items: [PriceHistory];
}

table ReferencePricePoint(fs_serializer) {
    utc_time: int;
    reference_name: string;
    price: double;
}

table SecurityPriceHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
        
    trading_date: int;
    security_id: long;
    listing_id: long;
    price_points: [ReferencePricePoint];  
}

table SecurityPriceHistoryList(fs_serializer) {
    items: [SecurityPriceHistory];
}


table ScheduleTask(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    type: string(required);
    name: string(required);
    cron: string;
    enabled: bool;
    parameters: string(required);
}

table ScheduleTaskList(fs_serializer) {
    items: [ScheduleTask];
}

table ScheduleTaskHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    task_id: long;
    start_time: long;
    end_time: long;
    task_name: string(required);
    task_type: string(required);
    run_type: TaskRunType;
    parameters: string(required);
    status: TaskStatus;
    message: string;
}

table ScheduleTaskHistoryList(fs_serializer) {
    items: [ScheduleTaskHistory];
}


table AlertEvent(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    trading_date: int;    
    classification: AlertClassification;
    severity: AlertSeverity;
    message: string(required);
    source: string(required);
    hostname: string(required);
    strategy_id: long;
    acked: bool;
    acked_time: long;
    acked_user: string;
}

table AlertEventList(fs_serializer) {
    items: [AlertEvent];
}

table RiskRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    order_router_id: long;
    name: string(required);
    type: RiskRuleType;
    parameters: string(required);
}

table RiskRuleList(fs_serializer) {
    items: [RiskRule];
}

table OrderRouter(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    execution_gateway_id: int;
    
    precedent: int;
    primary_identifier_regex: string(required);
    exchange_regex: string(required);
}

table OrderRouterList(fs_serializer) {
    items: [OrderRouter];
}
