include "Enum.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

table ReferencePrice(fs_serializer) {
    id: long;
    last_updated: long;
    
    security_listing_id: long;
    type: ReferencePriceType;
    trade_date: int;
    price: double;
}

table ReferencePriceList(fs_serializer) {
    items: [ReferencePrice];
}

table ExecutionGateway(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    settings: string(required);
    default_risk_settings: string(required);
    deleted: bool;
}

table ExecutionGatewayList(fs_serializer) {
    items: [ExecutionGateway];
}

table TickSizeTable(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    name: string(required);
    rules: string(required);
}

table TickSizeTableList(fs_serializer) {
    items: [TickSizeTable];
}

table SizeRule(fs_serializer) {
    from: long;
    to: long;
    step: long;
}


table SizeRuleTable(fs_serializer) {
    id: long;
    rules: [SizeRule];
}

table TradingCalendar(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    market: Market;
    exchange: string(required);
    observed_date: int;
    description: string(required);
}

table TradingCalendars(fs_serializer) {
    items: [TradingCalendar];
}

table Security(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    primary_identifier: string(required);
    description: string;
    sedol: string;
    isin: string;
    type: SecurityType;
    market: Market;
    position_account_type: PositionAccountType;
    same_day_sell_allowed: bool = true;
    deleted: bool;
}

table SecurityList(fs_serializer) {
    items: [Security];
}

table FutureSecurity(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    contract_size: double;
    expired_date: int;
}

table FutureSecurityList(fs_serializer) {
    items: [FutureSecurity];
}

table EtfPerformance(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;                                                                                                                                                     
    
    security_id: long;
    nav_date: int;
    nav: double;
    outstanding_shares: double;
}

table EtfPerformanceList(fs_serializer) {
    items: [EtfPerformance];
}


table SecurityListing(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    is_primary: bool;
    order_book_id: int;
    exchange_mic: string(required);
    exchange_symbol: string(required);
    ric: string;
    bbg: string;
    bbg_for_sub: string;
    currency: Currency;
    lot_size: double;
    tick_size_table_name: string;
    supports_margin: bool;
    deleted: bool;
}

table SecurityListingList(fs_serializer) {
    items: [SecurityListing];
}

table ExchangeSession(fs_serializer) {
    start: int32;
    end: int32;
    trading_status: TradingStatus;
}

table Instrument(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    security_type: SecurityType;
    same_day_sell_allowed: bool = true;
    expired_date: int;
    primary_identifier: string(required);
    description: string(required);
    market: Market;
    is_primary: bool;
    exchange_symbol: string(required);
    bbg: string;
    bbg_for_sub: string;
    isin: string;
    sedol: string;
    ric: string;
    position_account_type: PositionAccountType;
    currency: Currency;
    order_book_id: int;
    exchange_mic: string(required);
    exchange_acronym: string;
    contract_size: double;
    tick_size_table_name: string(required);
    lot_size: ulong;
    tick_size_table: [SizeRule];
    exchange_schedule:[ExchangeSession];
    trade_date: int;
    prev_trade_date: int;
    reference_price: long;
    price_limit_up: long;
    price_limit_down: long;
    price_scale: int64;
    quantity_scale: uint64;
    supports_margin: bool;
    tradable: bool;
}

table InstrumentList(fs_serializer) {
    items: [Instrument];
}

table Dividend(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    type: DividendType;
    declaration_date: int;
    ex_date: int;
    record_date: int;
    payable_date: int;
    currency: Currency;
    amount: double;
    gross_amount: double;
    notes: string;
}

table DividendList(fs_serializer) {
    items: [Dividend];
}

table Node(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    type: NodeType;
    enabled: bool;
    environment: string(required);
    hostname: string(required);
    settings: string(required);
}

table NodeList(fs_serializer) {
    items: [Node];
}

table NodeStatus(fs_serializer) {
    id: long;
    last_updated: long;
    
    node: Node(required);
    host: string;
    online: bool;
    online_time: long;
}

table NodeStatusList(fs_serializer) {
    items: [NodeStatus];
}

table Setting(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    scope: string;
    name: string;
    value: string;
}

table SettingList(fs_serializer) {
    items: [Setting];
}

table User(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    account: string(required);
    password_hashed: string(required);
    fullname: string(required);
    email: string;
    enabled: bool;
}

table UserList(fs_serializer) {
    items: [User];
}

table CurrencyRate(fs_serializer) {    
    base_currency: Currency;
    rate: double;
}

table CurrencyRateList(fs_serializer) {
    items: [CurrencyRate];
}

table MarketStatistic(fs_serializer) {
    id: long;
    last_updated: long;
    prev_close: double;
    prev_settlement_price: double;
    open: double;
    high: double;
    low: double;
    close: double;
    volume: ulong;
    limit_up: double;
    limit_down: double;
}

table MarketStatisticList(fs_serializer) {
    items: [MarketStatistic];
}

table PriceLevel(fs_serializer) {
    bid_size: ulong;
    bid: int64;
    ask: int64;
    ask_size: ulong;
}

table MarketPrice(fs_serializer) {
    id: long;
    last_updated: long;
    
    trading_status: TradingStatus;
    connection_state: ConnectionState;
    price_scale: int64;
    quantity_scale: uint64;
    levels: [PriceLevel];
    last_price: int64;
    iap: int64;
    iav: uint64;
}

table MarketPriceList(fs_serializer) {
    items: [MarketPrice];
}

table FutureBasis(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    listing_id: long;
    basis: double;
    trade_date: int;
    deleted: bool;
}

table FutureBasisList(fs_serializer) {
    items: [FutureBasis];
}

table StrategyOrderUpdateMessage(fs_serializer) {
    order_id: long;
    type: OrderMessageType;
    reject_level: RejectLevel;
    source: OrderMessageSource;
    submitted_time: long;
}

table OrderNotification {
    node_id: short;
    strategy_id: long;
    id: long;
    type: OrderMessageType;
    reject_level: RejectLevel;
    hostname: string;
    message: string;
}

table StrategyOrder(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    security_id: long;
    listing_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
  
    tactic_type: TacticType;
    tactic_code: ushort;
    
    trade_date: int;
    
    submit_time: long;
    end_time: long;
    
    status: OrderStatus;
    last_message_type: OrderMessageType;
    last_message: string;
    
    price: double;
    quantity: double;
    side: Side;
    currency: Currency;
    order_type: OrderType;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
            
    cum_qty: double;
    leaves_qty: double;    
    avg_px: double;
    
    original_client_order_id: int64;
    client_order_id: int64;
    gateway_internal_id: int32;
    external_id: string;
    
    gateway_id: long;
    router_index: int;
    router_id: long;
}

table StrategyOrderList(fs_serializer) {
    items: [StrategyOrder];
}

table Trade(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int;
    settlement_date: int;
    type: TradeType;
        
    security_id: long;
    listing_id: long;
    order_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    
    tactic_type: TacticType;
    tactic_code: ushort;
    
    client_order_id: int64;
    exec_id: string; 
    
    position_effect: PositionEffect;
    
    side: Side;
    currency: Currency;
    price: double;
    quantity: double;
    notes: string;
}

table TradeList(fs_serializer) {
    items: [Trade];
}

table Position(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int;
    security_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    yst_long_open: double;
    yst_short_open: double;
    yst_long_close: double;
    yst_short_close: double;
    intraday_long_open: double;
    intraday_long_close: double;
    intraday_short_open: double;
    intraday_short_close: double;
    day_buy: double;
    day_buy_avg: double;
    day_sell: double;
    day_sell_avg: double;
    yst_booking: double;
    booking: double;
}

table PositionList(fs_serializer) {
    items: [Position];
}

table DailyPnlSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
        
    trade_date: int;
    strategy_id: long;
    security_id: long;
    strategy_type: StrategyType;
    currency: Currency;    
    type: PnlType; 
    pnl: double;
}

table DailyPnlSummaryList(fs_serializer) {
    items: [DailyPnlSummary];
}

table MonthlyPnlSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int; // first day of the month
    strategy_id: long;
    security_id: long;
    strategy_type: StrategyType;
    currency: Currency;    
    type: PnlType; 
    pnl: double;
}

table MonthlyPnlSummaryList(fs_serializer) {
    items: [MonthlyPnlSummary];
}

table TradingPnl(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int;
    strategy_id: long;
    security_id: long;
    reference_listing_id: long;
    strategy_type: StrategyType;
    currency: Currency;
    yst_mark_price: double;
    open: double;
    day_buy: double;
    day_buy_avg: double;
    day_sell: double;
    day_sell_avg: double;
    net: double;
    mark_price: double;
    contract_size: double;
    pnl: double;
}

table TradingPnlList(fs_serializer) {
    items: [TradingPnl];
}

table LiveTradingPnl(fs_serializer) {
    id: long;
    native_pnl: double;
    live_price: double;
    mark_price: double;
}

table LiveTradingPnlList(fs_serializer) {
    items: [LiveTradingPnl];
}

table StrategyPnl(fs_serializer) {
    id: long;
    strategy_type: StrategyType;
    daily: double;
}

table StrategyPnlList(fs_serializer) {
    items: [StrategyPnl];
}

table OpenOrderSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    security_id: long;
    
    open_buy: double;
    open_sell: double;
    open_buy_notional: double;
    open_sell_notional: double;
}

table OpenOrderSummaryList(fs_serializer) {
    items: [OpenOrderSummary];
}

table PositionSummary(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    security_id: long;
    
    day_buy: double;
    day_sell: double;
    day_buy_avg: double;
    day_sell_avg: double;
    
    mark_price: double;
    live_price: double;
    pnl_daily: double;
}

table PositionSummaryList(fs_serializer) {
    items: [PositionSummary];
}

table StrategySchedule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    sessions: string(required);
}

table StrategyScheduleList(fs_serializer) {
    items: [StrategySchedule];
}

table StartupStrategy(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    type: StrategyType;
    name: string(required);
    full_name: string(required);
    owner: string(required);
    group: string(required);
    notes: string;
    terminated: bool;
    schedule: string(required);
    parameters: string(required);
    exec_node_id: short;
    exec_group_id: short;
}

table StartupStrategyList(fs_serializer) {
    items: [StartupStrategy];
}

table Basket(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    type: BasketType;
    tag: string;
    display_name: string(required);
    deleted: bool;
}

table BasketList(fs_serializer) {
    items: [Basket];
}

table BasketHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    basket_id: long;
    creation_redemption_unit: int;
    trade_date: int;
    valuation_date: int;
    cashes: string;
    constituents: string;
}

table BasketHistoryList(fs_serializer) {
    items: [BasketHistory];
}

table BasketEntry(fs_serializer) {
    security_id: long;
    listing_id: long;
    ticker: string;
    exchange_symbol: string;
    exchange: string;
    security_type: SecurityType;
    sedol: string;
    isin: string;
    quantity: double;
}

table BasketCash(fs_serializer) {
    currency: Currency;
    total: double;
    estimated: double;
}

table PricingEntry(fs_serializer) {
    listing_id: long;
    quantity: double;
}

table CashLine(fs_serializer) {
    currency: Currency;
    amount: double;
}

table EntryLine(fs_serializer) {
    listing_id: long;
    quantity: double;
}

table ResolvedBasket(fs_serializer) {
    id: long;
    last_updated: long;
    
    security_id: long;
    basket_name: string(required);
    resolved_result: BasketResolvedResult;
    
    valuation_date: int;
    trade_date: int;
    nav: double;
    
    cashes: [CashLine];
    entries: [EntryLine];
}

table ResolvedBasketList(fs_serializer) {
    items: [ResolvedBasket];
}

table ScheduleTask(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    type: string(required);
    name: string(required);
    cron: string;
    enabled: bool;
    parameters: string(required);
    deleted: bool;
}

table ScheduleTaskList(fs_serializer) {
    items: [ScheduleTask];
}

table ScheduleTaskHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    task_id: long;
    start_time: long;
    end_time: long;
    run_type: TaskRunType;
    status: TaskStatus;
    name: string(required);
    parameters: string(required);
    message: string;
}

table ScheduleTaskHistoryList(fs_serializer) {
    items: [ScheduleTaskHistory];
}

table AlertEvent(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;

    trade_date: int;
    node_id: short;
    event_id: long;
    classification: AlertClassification;
    severity: AlertSeverity;
    message: string(required);
    hostname: string(required);
    strategy_id: long;
    acked: bool;
    acked_time: long;
    acked_user: string;
}

table AlertEventList(fs_serializer) {
    items: [AlertEvent];
}

table OrderRouter(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    index: int;
    name: string(required);
    gateway_id: long;
    
    precedent: int;
    primary_identifier_regex: string(required);
    exchange_regex: string(required);
    risk_settings: string(required);
    deleted: bool;
}

table OrderRouterList(fs_serializer) {
    items: [OrderRouter];
}


table OrderRouterState(fs_serializer) {
    id: long;
    last_updated: long;
   
    name: string(required);
    state: ConnectionState;
    execution_gateway_id: int;
    execution_gateway_name: string;
}

table OrderRouterStateList(fs_serializer) {
    items: [OrderRouterState];
}

table NodeCommand(fs_serializer) {
    id: long;
    last_updated: long;
    
    node_id: short;
    cmd_type: NodeCommandType;
    data: string(required);
    user: string;
}

table NodeCommandList(fs_serializer) {
    items: [NodeCommand];
}

table PricingCheckRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    type: PricingCheckType;
    
    strategy_group_regex: string(required);
    strategy_name_regex: string(required);
    
    soft_limit: double;
    hard_limit: double;
}

table PricingCheckRuleList(fs_serializer) {
    items: [PricingCheckRule];
}

table PricingCheckResult(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int;
    rule_id: long;
    type: PricingCheckType;
    strategy_id: long;
    breaching_type: BreachingType;
    message: string;
}

table PricingCheckResultList(fs_serializer) {
    items: [PricingCheckResult];
}

table PricingCheckStatistic(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    rule_id: long;
    trade_date: int;
    strategy_id: long;
    soft_breached_count: int;
    hard_breached_count: int;
}

table PricingCheckStatisticList(fs_serializer) {
    items: [PricingCheckStatistic];
}

table BasketResolution(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    result: BasketResolvedResult;
    message: string;
    effective_date: int;
    nav_date: int;
    official_nav: double;
 }
 
 table BasketResolutionList(fs_serializer) {
    items: [BasketResolution];
 }
 
 table BasketResolutionRule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    primary_identifier_regex: string(required);
    security_type: SecurityType;
    parameters: string(required);
 }
 
 table BasketResolutionRuleList(fs_serializer) {
    items: [BasketResolutionRule];
 }
 
 table NavHistory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    security_id: long;
    nav_date: int;
    nav: double;
 }
 
 table NavHistoryList(fs_serializer) {
    items: [NavHistory];
 }
 
 table FutureProduct(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    identifier: string(required);
    stem: string(required);
    region: Region;
    type: FutureProductType;
    underlying_security_id: long;

    deleted: bool;
}

table FutureProductList(fs_serializer) {
    items: [FutureProduct];
}

table BetaModel(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    deleted: bool;
}

table BetaModelList(fs_serializer) {
    items: [BetaModel];
}

table BetaModelEntry(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    beta_model_id: long;
    future_product_id: long;
    beta: double;
    delta_skew: double;
    deleted: bool;
}

table BetaModelEntryList(fs_serializer) {
    items: [BetaModelEntry];
}

table ResolvedBetaModelEntry(fs_serializer) {
    security_id: long;
    listing_id: long;
    beta: double;
    delta_skew: double;
}

table ResolvedBetaModel(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    entries: [ResolvedBetaModelEntry];
}

table ResolvedBetaModelList(fs_serializer) {
    items: [ResolvedBetaModel];
}

table ScheduleTaskType(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    name: string(required);
    full_name: string(required);
}

table ScheduleTaskTypeList(fs_serializer) {
    items: [ScheduleTaskType];
}


table StrategyComponentStatus(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    component_type: StrategyComponentType;
    strategy_id: long;
    status: HealthStatus;
    description: string;
}

table StrategyComponentStatusList(fs_serializer) {
    items: [StrategyComponentStatus];
}

table ScheduleSession {
    start: uint32;
    end: uint32;
}

table StrategyDataCounterDouble(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: double;
}

table StrategyDataCounterDoubleList(fs_serializer) {
    items: [StrategyDataCounterDouble];
}

table StrategyDataCounterLong(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: int64;
}

table StrategyDataCounterLongList(fs_serializer) {
    items: [StrategyDataCounterLong];
}

table StrategyDataCounterString(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    strategy_id: long;
    counter_id: StrategyDataCounterId;
    value: string;
}

table StrategyDataCounterStringList(fs_serializer) {
    items: [StrategyDataCounterString];
}

table EntitlementList(fs_serializer) {
    items: [Entitlement];
}


table MarketDataGatewayDto(fs_serializer) {
    id: long;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    state: ConnectionState;
}

table ExecutionGatewayDto(fs_serializer) {
    id: long;
    last_updated: long;
    
    type: GatewayType;
    name: string(required);
    state: ConnectionState;
}

table NodeStateDto(fs_serializer) {
    id: long;
    type: NodeType;
    hostname: string(required);
    last_heartbeat: long;
}

table PlatformEvent(fs_serializer) {
    event_type: PlatformEventType;
    data: [ubyte];
}

table Exchange(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    mic: string(required);
    trading_day_end_time: int;
    acronym: string;
    name: string(required);
    time_zone: string(required);
}

table ExchangeList(fs_serializer) {
    items: [Exchange];
}

table TradingSession(fs_serializer) {
    day_of_week: int32;
    start: int32;
    duration: int32;
    end_of_daily_session: bool;
}

table ExchangeSchedule(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    exchange_mic: string(required);
    name: string(required);
    schedules: string(required);
}

table ExchangeCalendar(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    exchange_mic: string(required);
    trade_date: int;
    name: string(required);
    is_open: bool;
    has_settlement: bool;
    schedule_name: string(required);
}

table HistoricalPrice(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    
    trade_date: int;
    security_id: long;
    type: PriceType;
    price: double;
}

table HistoricalPriceList(fs_serializer) {
    items: [HistoricalPrice];
}

table GatewayState(fs_serializer) {
    id: uint;
    state: ConnectionState;
}

table PriceSnapshot(fs_serializer) {
    id: long;
    last_updated: long;    
    security_id: long;    
    status: TradingStatus;
    prev_close: double;
    last_price: double;
    bid_size: double;
    bid: double;
    ask: double;
    ask_size: double;
    theo: double;    
}

table OpenOrderNotionalSummary(fs_serializer) {
    gateway_id: long;
    order_router_id: long;
    open_buy_notional_usd: double;
    open_sell_notional_usd: double;
}

table BorrowInventory(fs_serializer) {
    id: long;
    version: int;
    last_updated: long;
    valid_until: int;
    security_id: long;
    inventory: double;
}

table BorrowInventoryList(fs_serializer) {
    items: [BorrowInventory];
}