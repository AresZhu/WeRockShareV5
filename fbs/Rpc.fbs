include "Enum.fbs";
include "Shared.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

enum CmdType: byte {
    PING = 0,
    LOGIN,
    NODE_LOGON,
    NODE_READY,
    NODE_HEARTBEAT,
    LOAD_SNAPSHOT,
    UPDATE_SECURITY,
    UPDATE_SECURITY_LISTING,
    UPDATE_INSTRUMENT,
    REMOVE_INSTRUMENT,
    UPDATE_LOT_SIZE_RULE,
    REMOVE_LOT_SIZE_RULE,
    UPDATE_TICK_SIZE_RULE,
    REMOVE_TICK_SIZE_RULE,
    UPDATE_SETTING,
    REMOVE_SETTING,
    MARKET_SUBSCRIPTION,
    NEW_ORDER,
    CANCEL_ORDERS,    
    AMEND_ORDER,
    TERMINATE_ORDERS,
    START_STRATEGIES,
    STOP_STRATEGIES,
    REINITIALIZE_STRATEGIES,
    RISK_STRATEGIES,
    TERMINATE_STRATEGY,
    DUMP_STRATEGY,
    TERMINATE_ORDERS_IN_STRATEGY,
    CREATE_STRATEGY,
    UPDATE_STRATEGY,
    CREATE_MANUAL_TRADE,
    RUN_TASK,
    CREATE_TASK,
    REMOVE_TASK,
    UPDATE_BASKET,
    REMOVE_BASKET,
    UPDATE_BASKET_HISTORY,
    REMOVE_BASKET_HISTORY,
    RECALCULATE_LIVE_POSITION,
    ADD_UPDATE_NODE,
    REMOVE_NODE,
    UPLOAD_PRICE_HISTORIES,
    SUBSCRIBE_MARKET_DATA,
    UPDATE_RISK_RULE,
    REMOVE_RISK_RULE,
    UPDATE_ORDER_ROUTER,
    REMOVE_ORDER_ROUTER,
    UPDATE_EXECUTION_GATEWAY,
    REMOVE_EXECUTION_GATEWAY,
    LOAD_OPEN_ORDERS,
    SEND_NODE_COMMAND,
    UPDATE_FUTURE_PRODUCTS,
    UPDATE_BETA_MODEL,
    UPDATE_SCHEDULE_TASK,
}

enum ErrorCode: short {
    SUCCESS = 0,
    START_SNAPSHOT,
    LOADING_SNAPSHOT,
    REQUEST_TIMEOUT,
    SNAPSHOT_LOADED,
    INVALID_REQUEST,
    INVALID_USER,
    NOT_FOUND,
    DUPLICATE_SECURITY,
    FAILED_TO_ROUTE_ORDER,
    GATEWAY_NOT_CONNECTED,
    NODE_IS_OFFLINE,
    UNKNOWN_ERROR,
}

enum EntityType : byte {
    UNKNOWN = 0,
    HEART_BEAT,
    USER,
    EXECUTION_GATEWAY,
    MARKET_PRICE,
    MARKET_STATISTIC,
    SECURITY,
    SECURITY_LISTING,
    ETF_PERFORMANCE,
    INSTRUMENT,
    TICK_SIZE_RULE,
    LOT_SIZE_RULE,
    TICK_SIZE_TABLE,
    LOT_SIZE_TABLE,
    STRATEGY_SCHEDULE,
    STARTUP_STRATEGY,
    FUTURES,
    OPTION,
    STRATEGY_ORDER,
    OPEN_ORDER,
    TRADE,
    RESOLVED_BASKET,
    PRICING_BASKET,
    PRICE_HISTORY,
    SECURITY_PRICE_HISTORY,
    SCHEDULE_TASK,
    SCHEDULE_TASK_HISTORY,
    SCHEDULE_TASK_TYPE,
    SETTING,
    FUTURES_PRODUCT,
    CORPORATE_ACTION,
    NODE,
    NODE_STATUS,
    STRATEGY_DTO,
    ALERT_EVENT,
    RISK_RULE,
    ORDER_ROUTER,
    EXECUTUION_GATEWAY,
    ORDER_ROUTER_STATE,
    BASKET,
    BASKET_HISTORY,
    NODE_COMMAND,
    PRICING_CHECK_RULE,
    PRICING_CHECK_RESULT,
    PRICING_CHECK_STATISTIC,
    STRATEGY_POSITION,
    POSITION_SUMMARY,
    OPEN_ORDER_SUMMARY,
    MM_POSITION_DTO,
    MM_QUOTING_DTO,
    CURRENCY_RATE,
    BASKET_VALIDATION,
    NAV_HISTORY,
    FUTURE_PRODUCT,
    BETA_MODEL,
    BETA_MODEL_ENTRY,
    RESOLVED_BETA_MODEL,
    HEDGING_STRATEGY_LOCATION,
    STRATEGY_ALERT_SUMMARY,
}

enum SubType : byte {
    UNKNOWN = 0,
    SUBSCRIBE,
    UNSUBSCRIBE,
    HEART_BEAT,
}

table LongValue(fs_serializer) {
    value: int64;
}

table LongValueList(fs_serializer) {
    items: [LongValue];
}

table NewOrder(fs_serializer) {
    ephemeral_id: ulong;
    listing_id: long;
    strategy_id: long;
    strategy_type: StrategyType;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
    raw_price: double;
    raw_quantity: double;
    price: int;
    quantity: uint;
    route_id: long;
}

table ReplaceOrder(fs_serializer) {
    ephemeral_id: ulong;
    parent_ephemeral_id: ulong;
    strategy_id: long;
    raw_price: double;
    raw_quantity: double;
    price: int;
    quantity: uint;
}

table AmendOrder(fs_serializer) {
    order_id: ulong;
    raw_price: double;
    raw_quantity: double;
    price: int;
    quantity: uint;
}

table CancelOrder {
    ephemeral_id: ulong;
    strategy_id: long;
}

table TerminateOrder {
    ephemeral_id: ulong;
    strategy_id: long;
}

table CmdRequest(fs_serializer) {
    id: int;
    type: CmdType;
    data: [ubyte];
}

table CmdReply(fs_serializer) {
    id: int;
    code: ErrorCode;
    data: [ubyte];
}

table SubResponse(fs_serializer) {
    event_type: EntityEventType;
    entity_id: long;
    data: [ubyte];
}

table LoginRequest(fs_serializer) {
    account: string;
    password: string;
    client_version: string;
}

table ManualTrade(fs_serializer) {
    listing_id: long;
    security_id: long;
    strategy_id: long;
    side: Side;
    price: double;
    quantity: double;
    type: TradeType;
    position_effect: PositionEffect;
    reference_info: string;
}

table AddOrUpdateInstrumentRequest(fs_serializer) {
    security: Security;
    security_listings: [SecurityListing];
}

table AddOrUpdateBetaModelRequest(fs_serializer) {
    beta_model: BetaModel;
    entries: [BetaModelEntry];
}

table ExecutionOrder(fs_serializer) {
    id: ulong;
    listing_id: uint;
    strategy_id: ushort;
    strategy_type: StrategyType;
    route_id: ushort;
    internal_id: uint;
    internal_id_on_market: uint32;
    external_id: string;
    price: double;
    quantity: double;
    quantity_filled: double;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
}

table ExecutionOrderList(fs_serializer) {
    items: [ExecutionOrder];
}


table BasketHistoryEx(fs_serializer) {
    id: long;   
    security_id: long;
    basket_id: long;
    basket_type: BasketType;
    basket_tag: string;
    creation_redemption_unit: int;
    trading_date: int;
    valuation_date: int;
    cashes: [BasketCash];
    constituents: [BasketEntry];
}