include "Enum.fbs";
include "Shared.fbs";

namespace WeRock.Share;

attribute "fs_serializer";

enum CmdType: byte {
    PING = 0,
    LOGIN,
    NODE_LOGON,
    NODE_READY,
    NODE_HEARTBEAT,
    LOAD_SNAPSHOT,
    LOAD_SNAPSHOT_BY_NAME,
    UPDATE_SECURITY,
    UPDATE_SECURITY_LISTING,
    UPDATE_INSTRUMENT,
    REMOVE_INSTRUMENT,
    UPDATE_LOT_SIZE_RULE,
    REMOVE_LOT_SIZE_RULE,
    UPDATE_TICK_SIZE_RULE,
    REMOVE_TICK_SIZE_RULE,
    UPDATE_SETTING,
    REMOVE_SETTING,
    MARKET_SUBSCRIPTION,
    NEW_ORDER,
    CANCEL_ORDERS,    
    AMEND_ORDER,
    TERMINATE_ORDERS,
    START_STRATEGIES,
    STOP_STRATEGIES,
    REINITIALIZE_STRATEGIES,
    RISK_STRATEGIES,
    TERMINATE_STRATEGY,
    DUMP_STRATEGY,
    TERMINATE_ORDERS_IN_STRATEGY,
    CREATE_STRATEGY,
    UPDATE_STRATEGY,
    UPDATE_STRATEGY_SCHEDULE,
    REMOVE_STRATEGY_SCHEDULE,
    CREATE_MANUAL_TRADE,
    RUN_TASK,
    CREATE_TASK,
    REMOVE_TASK,
    UPDATE_BASKET,
    REMOVE_BASKET,
    UPDATE_BASKET_HISTORY,
    REMOVE_BASKET_HISTORY,
    RECALCULATE_LIVE_POSITION,
    ADD_UPDATE_NODE,
    REMOVE_NODE,
    UPLOAD_PRICE_HISTORIES,
    SUBSCRIBE_MARKET_DATA,
    UPDATE_RISK_RULE,
    REMOVE_RISK_RULE,
    UPDATE_ORDER_ROUTER,
    REMOVE_ORDER_ROUTER,
    UPDATE_EXECUTION_GATEWAY,
    REMOVE_EXECUTION_GATEWAY,
    LOAD_OPEN_ORDERS,
    SEND_NODE_COMMAND,
    UPDATE_FUTURE_PRODUCTS,
    UPDATE_BETA_MODEL,
    UPDATE_SCHEDULE_TASK,
    ACK_ALERT_EVENT,
    GET_ORDER_MESSAGES,
    GET_ENTITLEMENTS,
}

enum ErrorCode: short {
    Success = 0,
    UnknownError,
    InvalidRequest,
    RequestTimeout,
    MsgBusServerNotAvailable,
    NoResponder,
    RecordNotFound,
    DatabaseError,
    SnapshotLoading,
    SnapshotLoaded,
    AuthenticationFailed,
    AccountDisabled,    
    StrategyNameDuplicated,
    ExchangeMicAlreadyExists
}

enum SubType : byte {
    UNKNOWN = 0,
    SUBSCRIBE,
    UNSUBSCRIBE,
    HEART_BEAT,
}

table LongValue(fs_serializer) {
    value: int64;
}

table LongValueList(fs_serializer) {
    items: [LongValue];
}

table StringValue(fs_serializer) {
    value: string;
}

table StringValueList(fs_serializer) {
    items: [StringValue];
}

table NewOrder(fs_serializer) {
    gateway_id: long;
    router_id: long;
    router_index: uint;
    instrument_internal_id: uint;
    instrument_id: long;
    strategy_id: long;
    order_type: OrderType;
    side: Side;
    price: double;
    quantity: double;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
    tactic_id: uint;
    correlation_id: long;
}

table AmendOrder(fs_serializer) {
    gateway_id: long;
    router_id: long;
    router_index: uint;
    original_client_order_id: long;
    price: double;
    quantity: double;
    position_effect: PositionEffect;
    correlation_id: long;
}

table CancelOrder {
    ephemeral_id: ulong;
    strategy_id: long;
}

table TerminateOrder {
    ephemeral_id: ulong;
    strategy_id: long;
}

table CmdRequest(fs_serializer) {
    id: int;
    type: CmdType;
    data: [ubyte];
}

table CmdReply(fs_serializer) {
    id: int;
    code: ErrorCode;
    data: [ubyte];
}

table SubResponse(fs_serializer) {
    event_type: EntityEventType;
    entity_id: long;
    data: [ubyte];
}

table SubResponseList(fs_serializer) {
    items: [SubResponse];
}

table LoginRequest(fs_serializer) {
    account: string;
    password: string;
    client_version: string;
}

table ManualTrade(fs_serializer) {
    listing_id: long;
    security_id: long;
    strategy_id: long;
    side: Side;
    price: double;
    quantity: double;
    type: TradeType;
    position_effect: PositionEffect;
    reference_info: string;
}

table AddOrUpdateInstrumentRequest(fs_serializer) {
    security: Security;
    security_listings: [SecurityListing];
}

table AddOrUpdateBetaModelRequest(fs_serializer) {
    beta_model: BetaModel;
    entries: [BetaModelEntry];
}

table ExecutionOrder(fs_serializer) {
    id: ulong;
    listing_id: uint;
    strategy_id: ushort;
    strategy_type: StrategyType;
    route_id: ushort;
    internal_id: uint;
    internal_id_on_market: uint32;
    external_id: string;
    price: double;
    quantity: double;
    quantity_filled: double;
    side: Side;
    position_effect: PositionEffect;
    time_in_force: TimeInForce;
}

table ExecutionOrderList(fs_serializer) {
    items: [ExecutionOrder];
}


table BasketHistoryEx(fs_serializer) {
    id: long;   
    security_id: long;
    basket_id: long;
    basket_type: BasketType;
    basket_tag: string;
    creation_redemption_unit: int;
    trading_date: int;
    valuation_date: int;
    cashes: [BasketCash];
    constituents: [BasketEntry];
}


table NodeLoginRequest(fs_serializer) {
    node_id: int;
    node_type: NodeType;
    environment: string(required);
    hostname: string(required);
}

table RequestResponse(fs_serializer) {
    code: ErrorCode;
    data: [ubyte];
}

table MarketDataSubscriptionRequest(fs_serializer) {
    listing_id: int;
    subscription_types: int;
}

table UserLoginRequest(fs_serializer) {
    account: string;
    password_hashed: string;
    client_version: string;
}

table ChangeUserPasswordRequest(fs_serializer) {
    user_id: int;
    old_password_hashed: string;
    new_password_hashed: string;
}

table SetUserPasswordRequest(fs_serializer) {
    user_id: int;
    new_password_hashed: string;
}

table LoadSnapshotRequest(fs_serializer) {
    table_name: string(required);
    filter: string;
    reply_subject: string;
}

table EntityEvent(fs_serializer) {
    event_type: EntityEventType;
    entity_id: long;
    data: [ubyte];
}

table LoadStartUpStrategiesRequest(fs_serializer) {
    node_id: int;
    strategy_type: StrategyType;
    reply_subject: string(required);
}

table LoadGatewayLiveOrdersRequest(fs_serializer) {
    gateway_id: long;
    reply_subject: string(required);
}

table StrategyAction(fs_serializer) {
    strategy_id: long;
    action_type: StrategyActionType;
    parameter: string;
}

table UpdateStrategyParametersRequest(fs_serializer) {
    strategy_id: long;
    parameters: string(required);
    strategy_name: string(required);
}

table SaveStrategyParametersRequest(fs_serializer) {
    strategy_id: long;
    parameters: string(required);
    strategy_name: string(required);
}

table DeltaOnePositionDto(fs_serializer) {
    strategy_id: long;
    security_id: long;
    
    strategy_position: double;
    strategy_position_notional_usd: double;
    consolidated_position: double;
    consolidated_position_notional_usd: double;
    manual_strategy_position: double;
    manual_strategy_position_notional_usd: double;
}

table DeltaHedgerPositionDto(fs_serializer) {
    strategy_id: long;
    security_id: long;
    
    strategy_position: double;
    strategy_position_notional_usd: double;
}

table UpdateTickSizeTablesRequest(fs_serializer) {
    exchange_mic: string(required);
    tables: [TickSizeTable];
}

table UpdateSecurityRequest(fs_serializer) {
    security: Security;
    future_security: FutureSecurity;
    security_listings: [SecurityListing];
}

table HistoricalPriceEntry(fs_serializer) {
    type: PriceType;
    price: double;
}

table UpdateHistoricalPricesRequest(fs_serializer) {
    security_id: long;
    trading_date: int;
    prices: [HistoricalPriceEntry];
}

table UpdateBasketReqauest(fs_serializer) {
    basket: Basket(required);
    history: BasketHistory(required);
}

table UpdateBetaModelRequest(fs_serializer) {
    beta_model: BetaModel(required);
    entries: [BetaModelEntry];
}